: CASを使ったランダムウォーカー
: 各ワーカーは4x4フィールド内をランダムに移動し、
: CASでグリッドを更新することで衝突を検出する

: ============================================================================
: 初期化
: ============================================================================

: ワーカーの値を決定（128-254のランダム値）
M=150  : 自分の値（ワーカー1として150）

: 初期位置（0-3の範囲）
X=0    : 初期X座標
Y=0    : 初期Y座標

: 初期方向（0=上, 1=右, 2=下, 3=左）
D=1    : 初期方向（右向き）

: 初期位置に自分の値を配置
`=M

?="Walker " ?=M ?=" started at (" ?=X ?="," ?=Y ?=")" /

: ============================================================================
: メインループ
: ============================================================================
^MAIN_LOOP
    : 現在位置を保存
    H=X  : 元のX
    I=Y  : 元のY
    
    : 試行済み方向を記録するフラグ（ビットマスク風）
    T=0  : 試行回数
    
    ^TRY_DIRECTION
        : 4方向全て試したら行き止まり
        ;=T>=4 #=^DEAD_END
        
        : ----------------------------------------
        : 方向転換判定と次座標計算
        : ----------------------------------------
        : 次の座標を計算
        N=X
        P=Y
        
        ;=D=0 P=Y-1  : 上
        ;=D=1 N=X+1  : 右  
        ;=D=2 P=Y+1  : 下
        ;=D=3 N=X-1  : 左
        
        : フィールド外チェック
        B=0  : 境界フラグ
        ;=N<0 B=1
        ;=N>=4 B=1
        ;=P<0 B=1
        ;=P>=4 B=1
        
        : フィールド外または（フィールド内でT=0かつ方向転換判定）
        ;=B=1 #=^CHANGE_DIR
        
        : T=0の時だけランダム判定（簡易版）
        ;=T>0 #=^CHECK_DEST
        
        : 1/4の確率で方向転換（簡易実装）
        : ここでは常にチェックに進む（実際はランダム）
        #=^CHECK_DEST
    
    ^CHANGE_DIR
        : 次の方向を試す
        D=D+1
        ;=D>=4 D=0
        T=T+1
        #=^TRY_DIRECTION
    
    ^CHECK_DEST
        : ----------------------------------------
        : 目的地のチェック
        : ----------------------------------------
        : 座標を次の位置に設定
        X=N
        Y=P
        V=`
        
        : 値が0なら移動可能
        ;=V=0 #=^DO_CAS
        
        : 0でない場合は別の方向を試す
        X=H
        Y=I
        D=D+1
        ;=D>=4 D=0
        T=T+1
        #=^TRY_DIRECTION
    
    ^DO_CAS
        : ----------------------------------------
        : CASで新しい位置に値をセット
        : ----------------------------------------
        A=<&0,M>
        
        : CASが成功したか確認
        ;=A=1 #=^CAS_SUCCESS
        
        : 失敗 = 衝突
        ?="COLLISION at (" ?=X ?="," ?=Y ?=")" /
        #=-1
    
    ^CAS_SUCCESS
        : ----------------------------------------
        : 元の位置をゼロにする
        : ----------------------------------------
        X=H
        Y=I
        `=0
        
        : 新しい位置に戻す
        X=N
        Y=P
        
        ?="Moved to (" ?=X ?="," ?=Y ?=")" /
        
        : 次のループへ
        #=^MAIN_LOOP

: ============================================================================
: エラーハンドリング
: ============================================================================
^DEAD_END
    ?="DEAD END at (" ?=X ?="," ?=Y ?=")! No valid moves available." /
    #=-1
